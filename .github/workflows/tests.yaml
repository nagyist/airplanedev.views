name: tests
on: push
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Lint
        run: yarn workspaces run lint

  test:
    runs-on: ubuntu-latest-4-cores-airplane
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Test
        run: yarn workspaces run test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Build lib
        run: yarn workspace @airplane/views run build
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          start: yarn workspace adminpanel run dev
          project: ./lib
          browser: chrome
          headed: true
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: ./lib/cypress/screenshots
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: ./lib/cypress/videos
  publish:
    runs-on: ubuntu-latest
    concurrency: publish
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main'
    env:
      PACKAGE_NAME: "@airplane/views"
    permissions:
      # Grant the GITHUB_TOKEN permission to create releases.
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          # Creates an .npmrc that looks for a `NODE_AUTH_TOKEN` env var to authenticate.
          registry-url: "https://registry.npmjs.org"
          cache: "yarn"
      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd lib
          VERSION=$(cat package.json | jq -r .version)
          if [ ! "$(npm show ${PACKAGE_NAME}@${VERSION} version)" = "" ]; then
            echo "Already published ${VERSION}, skipping: https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION}"
            exit 0
          fi

          TAG="latest"
          GH_ARGS=""
          echo "Publishing ${VERSION} as ${PACKAGE_NAME}@${TAG}"

          echo "::group::Building..."
          yarn
          yarn build
          echo "::endgroup::"

          echo "::group::Publishing..."
          cd dist
          TMP_DIR=$(mktemp -d -t publish-XXXXXXXXXX)
          TARBALL="${TMP_DIR}/package.tgz"
          yarn pack -f ${TARBALL}
          tar -xf ${TARBALL} -C ${TMP_DIR}
          tree ${TMP_DIR}/package

          yarn publish ${TARBALL} --new-version ${VERSION} --tag=${TAG}
          echo "::endgroup::"

          echo "::group::Creating GitHub release..."
          gh release create "v${VERSION}" --generate-notes ${GH_ARGS} --target $(git rev-parse HEAD)
          echo "::endgroup::"
  publish-next:
    runs-on: ubuntu-latest
    concurrency: publish
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/next'
    env:
      PACKAGE_NAME: "@airplane/views"
    permissions:
      # Grant the GITHUB_TOKEN permission to create releases.
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          # Creates an .npmrc that looks for a `NODE_AUTH_TOKEN` env var to authenticate.
          registry-url: "https://registry.npmjs.org"
          cache: "yarn"
      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd lib
          VERSION=$(cat package.json | jq -r .version)
          if [ ! "$(npm show ${PACKAGE_NAME}@${VERSION} version)" = "" ]; then
            echo "Already published ${VERSION}, skipping: https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION}"
            exit 0
          fi

          if [[ "${VERSION}" != *"-"* ]]; then
            echo "Not a pre-release version, skipping: ${VERSION}"
            exit 0
          fi

          TAG="next"
          GH_ARGS="--prerelease"
          echo "Publishing ${VERSION} as ${PACKAGE_NAME}@${TAG}"

          echo "::group::Building..."
          yarn
          yarn build
          echo "::endgroup::"

          echo "::group::Publishing..."
          cd dist
          TMP_DIR=$(mktemp -d -t publish-XXXXXXXXXX)
          TARBALL="${TMP_DIR}/package.tgz"
          yarn pack -f ${TARBALL}
          tar -xf ${TARBALL} -C ${TMP_DIR}
          tree ${TMP_DIR}/package

          yarn publish ${TARBALL} --new-version ${VERSION} --tag=${TAG}
          echo "::endgroup::"

          echo "::group::Creating GitHub release..."
          gh release create "v${VERSION}" --generate-notes ${GH_ARGS} --target $(git rev-parse HEAD)
          echo "::endgroup::"
